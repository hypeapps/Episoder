apply plugin: 'kotlin-android-extensions'
apply plugin: 'jacoco'

rootProject.applicationModulePlugins.each {
    apply plugin: it
}

android {
    def ext = rootProject.extensions.ext
    compileSdkVersion ext.android.compileSdkVersion
    buildToolsVersion ext.android.buildToolsVersion
    defaultConfig {
        minSdkVersion ext.android.minSdkVersion
        targetSdkVersion ext.android.targetSdkVersion
        versionCode ext.android.versionCode
        versionName ext.android.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug{
            testCoverageEnabled true
        }
    }
    buildTypes.each {
        it.buildConfigField('String', 'USERNAME_EPISODIE_API', USERNAME_EPISODIE_API)
        it.buildConfigField('String', 'PASSWORD_EPISODIE_API', PASSWORD_EPISODIE_API)
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    lintOptions {
        abortOnError true
        textReport true
        textOutput 'stdout'
        htmlReport true
        htmlOutput file("${buildDir}/reports/lint/lint.html")
    }
    sourceSets {
        main {
            java.srcDirs += 'src/main/kotlin'
        }
        test {
            java.srcDirs += 'src/test/kotlin'
        }
        androidTest {
            java.srcDirs += 'src/androidTest/kotlin'
        }
    }
}

kapt {
    generateStubs = true
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.aar'])
    rootProject.applicationModuleDependencies.each {
        add(it.configuration, it.dependency, it.options)
    }
}
